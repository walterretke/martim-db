CREATE TABLE paises (
    id_pais NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL
);

CREATE TABLE generos (
    id_genero NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL
);

CREATE TABLE faixas_etarias (
    id_faixa NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descricao VARCHAR2(50) NOT NULL
);

CREATE TABLE atores (
    id_ator NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    nacionalidade VARCHAR2(100) NULL,
    sexo CHAR(1) NULL,
    data_nascimento DATE NULL
);

CREATE TABLE diretores (
    id_diretor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    nacionalidade VARCHAR2(100) NULL,
    sexo CHAR(1) NULL,
    data_nascimento DATE NULL
);

CREATE TABLE series (
    id_serie NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(150) NOT NULL,
    ano_lancamento NUMBER(4) NULL,
    id_genero NUMBER NULL,
    id_faixa NUMBER NULL,
    id_pais_origem NUMBER NULL,
    exibir CHAR(1) DEFAULT 'S',
    FOREIGN KEY (id_genero) REFERENCES generos(id_genero),
    FOREIGN KEY (id_faixa) REFERENCES faixas_etarias(id_faixa),
    FOREIGN KEY (id_pais_origem) REFERENCES paises(id_pais)
);

CREATE TABLE temporadas (
    id_temporada NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    numero_temporada NUMBER NOT NULL,
    id_serie NUMBER NOT NULL,
    FOREIGN KEY (id_serie) REFERENCES series(id_serie)
);

CREATE TABLE episodios (
    id_episodio NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(150) NOT NULL,
    duracao NUMBER NULL,
    id_temporada NUMBER NOT NULL,
    FOREIGN KEY (id_temporada) REFERENCES temporadas(id_temporada)
);

CREATE TABLE filmes (
    id_filme NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(150) NOT NULL,
    duracao NUMBER NULL,
    ano_lancamento NUMBER(4) NULL,
    resolucao VARCHAR2(10) NULL,
    id_genero NUMBER NULL,
    id_faixa NUMBER NULL,
    id_pais_origem NUMBER NULL,
    exibir CHAR(1) DEFAULT 'S',
    FOREIGN KEY (id_genero) REFERENCES generos(id_genero),
    FOREIGN KEY (id_faixa) REFERENCES faixas_etarias(id_faixa),
    FOREIGN KEY (id_pais_origem) REFERENCES paises(id_pais)
);

CREATE TABLE personagens (
    id_personagem NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL
);

CREATE TABLE atores_personagens (
    id_ator NUMBER NULL,
    id_personagem NUMBER NULL,
    id_serie NUMBER NULL,
    id_filme NUMBER NULL,
    PRIMARY KEY (id_ator, id_personagem, id_serie, id_filme),
    FOREIGN KEY (id_ator) REFERENCES atores(id_ator),
    FOREIGN KEY (id_personagem) REFERENCES personagens(id_personagem),
    FOREIGN KEY (id_serie) REFERENCES series(id_serie),
    FOREIGN KEY (id_filme) REFERENCES filmes(id_filme)
);

CREATE TABLE direcao_filmes (
    id_diretor NUMBER NULL,
    id_filme NUMBER NULL,
    PRIMARY KEY (id_diretor, id_filme),
    FOREIGN KEY (id_diretor) REFERENCES diretores(id_diretor),
    FOREIGN KEY (id_filme) REFERENCES filmes(id_filme)
);

CREATE TABLE direcao_episodios (
    id_diretor NUMBER NULL,
    id_episodio NUMBER NULL,
    PRIMARY KEY (id_diretor, id_episodio),
    FOREIGN KEY (id_diretor) REFERENCES diretores(id_diretor),
    FOREIGN KEY (id_episodio) REFERENCES episodios(id_episodio)
);

CREATE TABLE premiacao_atores (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_ator NUMBER NULL,
    ano NUMBER(4) NULL,
    premio VARCHAR2(100) NULL,
    id_filme NUMBER NULL,
    id_serie NUMBER NULL,
    FOREIGN KEY (id_ator) REFERENCES atores(id_ator),
    FOREIGN KEY (id_filme) REFERENCES filmes(id_filme),
    FOREIGN KEY (id_serie) REFERENCES series(id_serie)
);

CREATE TABLE premiacao_diretores (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_diretor NUMBER NULL,
    ano NUMBER(4) NULL,
    premio VARCHAR2(100) NULL,
    id_filme NUMBER NULL,
    id_serie NUMBER NULL,
    FOREIGN KEY (id_diretor) REFERENCES diretores(id_diretor),
    FOREIGN KEY (id_filme) REFERENCES filmes(id_filme),
    FOREIGN KEY (id_serie) REFERENCES series(id_serie)
);

CREATE TABLE premiacao_filmes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_filme NUMBER NOT NULL,
    premio VARCHAR2(100) NULL,
    ano NUMBER(4) NULL,
    FOREIGN KEY (id_filme) REFERENCES filmes(id_filme)
);

CREATE TABLE premiacao_series (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_serie NUMBER NOT NULL,
    premio VARCHAR2(100) NULL,
    ano NUMBER(4) NULL,
    temporada NUMBER NULL,
    FOREIGN KEY (id_serie) REFERENCES series(id_serie)
);

CREATE TABLE avaliacoes_filmes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_filme NUMBER NOT NULL,
    nota NUMBER(2,1) CHECK (nota BETWEEN 0 AND 10),
    FOREIGN KEY (id_filme) REFERENCES filmes(id_filme)
);

CREATE TABLE avaliacoes_series (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_serie NUMBER NOT NULL,
    nota NUMBER(2,1) CHECK (nota BETWEEN 0 AND 10),
    FOREIGN KEY (id_serie) REFERENCES series(id_serie)
);

CREATE TABLE avaliacoes_temporadas (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_temporada NUMBER NOT NULL,
    nota NUMBER(2,1) CHECK (nota BETWEEN 0 AND 10),
    FOREIGN KEY (id_temporada) REFERENCES temporadas(id_temporada)
);

CREATE TABLE avaliacoes_episodios (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_episodio NUMBER NOT NULL,
    nota NUMBER(2,1) CHECK (nota BETWEEN 0 AND 10),
    FOREIGN KEY (id_episodio) REFERENCES episodios(id_episodio)
);



--15

CREATE OR REPLACE TRIGGER trg_delete_premiacoes_filme
BEFORE DELETE ON filmes
FOR EACH ROW
BEGIN
    DELETE FROM premiacao_atores
    WHERE id_filme = :OLD.id_filme;

    DELETE FROM premiacao_diretores
    WHERE id_filme = :OLD.id_filme;

    DELETE FROM premiacao_filmes
    WHERE id_filme = :OLD.id_filme;
END;
/

CREATE OR REPLACE TRIGGER trg_delete_premiacoes_serie
BEFORE DELETE ON series
FOR EACH ROW
BEGIN
    DELETE FROM premiacao_atores
    WHERE id_serie = :OLD.id_serie;

    DELETE FROM premiacao_diretores
    WHERE id_serie = :OLD.id_serie;
END;
/

--15




--16

CREATE OR REPLACE TYPE tipo_filme_premiacao AS OBJECT (
    titulo            VARCHAR2(255),
    total_premiacoes  NUMBER
);
/

CREATE OR REPLACE TYPE tabela_filme_premiacao AS TABLE OF tipo_filme_premiacao;
/

CREATE OR REPLACE FUNCTION listar_total_premiacoes_filmes
RETURN tabela_filme_premiacao PIPELINED
IS
BEGIN
    FOR r IN (
        SELECT
            f.titulo,
            (
                NVL((SELECT COUNT(*) FROM premiacao_atores    pa WHERE pa.id_filme = f.id_filme), 0) +
                NVL((SELECT COUNT(*) FROM premiacao_diretores pd WHERE pd.id_filme = f.id_filme), 0) +
                NVL((SELECT COUNT(*) FROM premiacao_filmes    pf WHERE pf.id_filme = f.id_filme), 0)
            ) AS total_premiacoes
        FROM filmes f
        WHERE f.id_filme <> 0
    ) LOOP
        PIPE ROW(tipo_filme_premiacao(r.titulo, r.total_premiacoes));
    END LOOP;

    RETURN;
END;
/

--16




--17

--INATIVAR

CREATE OR REPLACE PROCEDURE inativar_exibicao_por_pais(p_pais_nome VARCHAR2)
IS
    v_id_pais NUMBER;
BEGIN
    -- Buscar o ID do país
    SELECT id_pais
    INTO v_id_pais
    FROM paises
    WHERE nome = p_pais_nome;

    -- Atualizar filmes
    UPDATE filmes
    SET exibir = 'N'
    WHERE id_pais_origem = v_id_pais;

    -- Atualizar séries
    UPDATE series
    SET exibir = 'N'
    WHERE id_pais_origem = v_id_pais;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('País "' || p_pais_nome || '" não encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inativar exibição: ' || SQLERRM);
END;
/

--ATIVAR

CREATE OR REPLACE PROCEDURE reativar_exibicao_por_pais(p_pais_nome VARCHAR2)
IS
    v_id_pais NUMBER;
BEGIN
    -- Buscar o ID do país
    SELECT id_pais
    INTO v_id_pais
    FROM paises
    WHERE nome = p_pais_nome;

    -- Atualizar filmes
    UPDATE filmes
    SET exibir = 'S'
    WHERE id_pais_origem = v_id_pais;

    -- Atualizar séries
    UPDATE series
    SET exibir = 'S'
    WHERE id_pais_origem = v_id_pais;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('País "' || p_pais_nome || '" não encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao reativar exibição: ' || SQLERRM);
END;
/

--17